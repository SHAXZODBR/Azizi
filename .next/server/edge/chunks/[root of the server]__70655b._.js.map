{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from \"next/server\";\n\n// Define protected routes that require authentication\nconst adminRoutes = [\"/admin\", \"/admin/archive\"];\nconst protectedRoutes = [\"/archive\"];\n\nexport default async function middleware(req: NextRequest) {\n  const { pathname } = req.nextUrl;\n\n  // Get the session from the cookie\n  const sessionCookie = req.cookies.get(\"session\")?.value;\n\n  if (!sessionCookie) {\n    // If no session and trying to access protected route, redirect to login\n    if (adminRoutes.some((route) => pathname.startsWith(route))) {\n      return NextResponse.redirect(new URL(\"/login\", req.url));\n    }\n    return NextResponse.next();\n  }\n\n  // Parse the session\n  const session = JSON.parse(sessionCookie);\n\n  // Check if user is trying to access admin routes without admin role\n  if (\n    adminRoutes.some((route) => pathname.startsWith(route)) &&\n    session.role !== \"admin\"\n  ) {\n    return NextResponse.redirect(new URL(\"/archive\", req.url));\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\"/admin/:path*\", \"/archive/:path*\", \"/login\", \"/register\"],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,sDAAsD;AACtD,MAAM,cAAc;IAAC;IAAU;CAAiB;AAChD,MAAM,kBAAkB;IAAC;CAAW;AAErB,eAAe,WAAW,GAAgB;IACvD,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,kCAAkC;IAClC,MAAM,gBAAgB,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY;IAElD,IAAI,CAAC,eAAe;QAClB,wEAAwE;QACxE,IAAI,YAAY,IAAI,CAAC,CAAC,QAAU,SAAS,UAAU,CAAC,SAAS;YAC3D,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,oBAAoB;IACpB,MAAM,UAAU,KAAK,KAAK,CAAC;IAE3B,oEAAoE;IACpE,IACE,YAAY,IAAI,CAAC,CAAC,QAAU,SAAS,UAAU,CAAC,WAChD,QAAQ,IAAI,KAAK,SACjB;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,IAAI,GAAG;IAC1D;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAiB;QAAmB;QAAU;KAAY;AACtE"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}